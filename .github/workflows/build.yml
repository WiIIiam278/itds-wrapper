name: Build Wrapper

on:
  workflow_dispatch:

jobs:
  build-mobile-wrappers:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - image: 'ubuntu-latest'
            tfm: net9.0-android
            rid: 'android-arm64'
            project: ITDSWrapper.Android
            melondsds_src: build/src/libretro/melondsds_libretro_android.so
            melondsds_dst: ITDSWrapper.Android/libs/arm64-v8a/libmelondsds_libretro.so
            cmake_flags: '-DENABLE_OGLRENDERER=OFF -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=24 -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK/build/cmake/android.toolchain.cmake"'
            single_file: false
            artifact: publish/com.intothedreamspring.itdswrapper-Signed.apk
          # - image: 'macos-latest'
          #   tfm: net9.0-ios
          #   rid: 'ios-arm64'
          #   project: ITDSWrapper.iOS
          #   melondsds_src: melondsds_libretro-ios-Release/cores/melondsds_libretro.dylib
          #   melondsds_dst: ITDSWrapper.iOS/melondsds_libretro.dylib
          #   single_file: false
    runs-on: ${{ matrix.platform.image }}
    steps:
    # Setup
    - name: 'Checkout repository'
      uses: actions/checkout@v5
    - name: Setup .NET
      uses: actions/setup-dotnet@v5.0.0
      with:
        dotnet-version: '9.0.x'
    - name: 'Download ROM'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_BUILDS_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object get into-the-dream-spring-builds/itds.nds
      
    - name: 'Checkout melonDS DS'
      uses: actions/checkout@v5
      with:
        repository: jonko0493/melonds-ds
        ref: use-my-fork
        path: melondsds
        clean: false
    - name: Install Dependencies (Linux)
      if: ${{ matrix.platform.image == 'ubuntu-latest' }}
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: ccache cmake libepoxy-dev libopengl0 libopengl-dev ninja-build p7zip-full x11-xserver-utils xdg-utils xvfb
        version: 1.2
    - name: 'Build melonDS DS'
      run: |
        pushd melondsds
        cmake -B build -Wno-deprecated -DCMAKE_BUILD_TYPE="Release" ${{ matrix.platform.cmake_flags }} -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        cmake --build build
        popd
        cp melondsds/${{ matrix.platform.melondsds_src }} ${{ matrix.platform.melondsds_dst }}
      
    # Android-specific setup
    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'
      if: matrix.platform.project == 'ITDSWrapper.Android'
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      if: matrix.platform.project == 'ITDSWrapper.Android'
    - name: Install Android .NET workload
      run: dotnet workload install android
      if: matrix.platform.project == 'ITDSWrapper.Android'

    # Build & Publish
    - name: Restore & Publish Wrapper
      run: |
        dotnet restore ${{ matrix.platform.project }} -r ${{ matrix.platform.rid }}
        dotnet publish ${{ matrix.platform.project }}/${{ matrix.platform.project }}.csproj -c Release -f ${{ matrix.platform.tfm }} -r ${{ matrix.platform.rid }} --self-contained /p:DebugType=None /p:DebugSymbols=false /p:PublishSingleFile=${{ matrix.platform.single_file }}
    - name: 'Upload wrappers to bucket'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_WRAPPER_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object put into-the-dream-spring-wrapper/com.intothedreamspring.itdswrapper.apk --file wrappers/com.intothedreamspring.itdswrapper.apk
      if: matrix.platform.project == 'ITDSWrapper.Android'


  build-steam-wrappers:
    strategy:
      matrix:
        platform:
          - image: 'ubuntu-latest'
            tfm: net9.0
            rid: 'linux-x64'
            melondsds_src: build/src/libretro/melondsds_libretro.so
            melondsds_dst: ITDSWrapper.Desktop/melondsds_libretro.so
            cmake_flags: ''
            shell: 'bash'
          - image: 'macos-latest'
            tfm: net9.0
            rid: 'osx-x64'
            melondsds_src: build/src/libretro/melondsds_libretro.dylib
            melondsds_dst: ITDSWrapper.Desktop/melondsds_libretro.dylib
            cmake_flags: '-DCMAKE_OSX_ARCHITECTURES:STRING="x86_64" -DENABLE_OGLRENDERER=OFF -DCMAKE_APPLE_SILICON_PROCESSOR="x86_64"'
            shell: 'bash'
          - image: 'macos-latest'
            tfm: net9.0
            rid: 'osx-arm64'
            melondsds_src: build/src/libretro/melondsds_libretro.dylib
            melondsds_dst: ITDSWrapper.Desktop/melondsds_libretro.dylib
            cmake_flags: ''
            shell: 'bash'
          - image: 'windows-latest'
            tfm: net9.0
            rid: 'win-x64'
            melondsds_src: build/src/libretro/melondsds_libretro.dll
            melondsds_dst: ITDSWrapper.Desktop/melondsds_libretro.dll
            cmake_flags: '-DENABLE_SCCACHE=ON -DSCCACHE="C:/Users/runneradmin/.cargo/bin/sccache.exe"'
            shell: 'msys2 {0}'
    runs-on: ${{ matrix.platform.image }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v5
    - name: Setup .NET
      uses: actions/setup-dotnet@v5.0.0
      with:
        dotnet-version: '9.0.x'
    - name: 'Download ROM'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_BUILDS_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object get into-the-dream-spring-builds/itds.nds

    - name: 'Checkout melonDS DS'
      uses: actions/checkout@v5
      with:
        repository: jonko0493/melonds-ds
        ref: use-my-fork
        path: melondsds
        clean: false
    - name: Install Dependencies (Linux)
      if: ${{ matrix.platform.image == 'ubuntu-latest' }}
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: ccache cmake libepoxy-dev libopengl0 libopengl-dev ninja-build p7zip-full x11-xserver-utils xdg-utils xvfb
        version: 1.2
    - name: Install Dependencies (macOS)
      if: ${{ matrix.platform.image == 'macos-latest' }}
      shell: bash
      run: brew install pkg-config cmake ninja ccache
    - name: Install MSYS2 Dependencies (Windows)
      uses: msys2/setup-msys2@v2
      if: ${{ matrix.platform.image == 'windows-latest' }}
      with:
        msystem: MINGW64
        update: true
        install: git pkgconf mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake

    - name: 'Build melonDS DS'
      run: |
        pushd melondsds
        cmake -B build -Wno-deprecated -DCMAKE_BUILD_TYPE="Release" ${{ matrix.platform.cmake_flags }} -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        cmake --build build
        popd
        cp melondsds/${{ matrix.platform.melondsds_src }} ${{ matrix.platform.melondsds_dst }}

    - name: Restore & Publish Wrapper
      run: |
        dotnet restore ITDSWrapper.Desktop/ITDSWrapper.Desktop.csproj -r ${{ matrix.platform.rid }}
        dotnet publish ITDSWrapper.Desktop/ITDSWrapper.Desktop.csproj -c Release -f ${{ matrix.platform.tfm }} -r ${{ matrix.platform.rid }} --self-contained /p:DebugType=None /p:DebugSymbols=false /p:PublishSingleFile=true
      shell: pwsh
    - name: Zip wrapper
      run: Compress-Archive -Path ITDSWrapper.Desktop/bin/Release/${{ matrix.platform.tfm }}/${{ matrix.platform.rid }}/publish -DestinationPath ./publish.zip
      shell: pwsh
    - name: 'Upload wrappers to bucket'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_WRAPPER_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object put into-the-dream-spring-wrapper/${{ matrix.platform.rid }}.zip --file publish.zip

  upload-to-steam:
    runs-on: ubuntu-latest
    needs: build-steam-wrappers
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v5
    - name: Make steam dir
      run: mkdir steam
    - name: 'Download Linux x64 Wrapper'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_WRAPPER_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object get into-the-dream-spring-wrapper/linux-x64.zip
    - name: 'Download Linux x64 Wrapper'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_WRAPPER_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object get into-the-dream-spring-wrapper/macos-x64.zip
    - name: 'Download Linux x64 Wrapper'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_WRAPPER_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object get into-the-dream-spring-wrapper/macos-arm64.zip
    - name: 'Download Linux x64 Wrapper'
      uses: cloudflare/wrangler-action@v3
      with:
        accountId: ${{ secrets.R2_ACCOUNT_ID }}
        apiToken: ${{ secrets.R2_WRAPPER_TOKEN }}
        wranglerVersion: "2.20.0"
        command: r2 object get into-the-dream-spring-wrapper/win-x64.zip
    - name: Unzip Wrappers
      run: |
        Expand-Archive -Path linux-x64.zip -DestinationPath steam/linux-x64
        Expand-Archive -Path macos-x64.zip -DestinationPath macos-x64
        Expand-Archive -Path macos-arm64.zip -DestinationPath macos-arm64
        Expand-Archive -Path win-x64.zip -DestinationPath steam/win-x64
      shell: pwsh
    - name: Construct macOS app bundle
      run: |
        mkdir -p steam/macos/Into\ the\ Dream\ Spring.app/Contents/MacOS/osx-x64
        mkdir -p steam/macos/Into\ the\ Dream\ Spring.app/Contents/MacOS/osx-arm64
        mkdir -p steam/macos/Into\ the\ Dream\ Spring.app/Contents/Resources
        cp itds-wrapper/ITDSWrapper.Desktop/macos/Info.plist steam/macos/Into\ the\ Dream\ Spring.app/Contents/Info.plist
        cp itds-wrapper/ITDSWrapper.Desktop/macos/ITDSWrapper steam/macos/Into\ the\ Dream\ Spring.app/Contents/MacOS/ITDSWrapper
        cp itds-wrapper/ITDSWrapper.Desktop/macos/ITDSWrapper.icns steam/macos/Into\ the\ Dream\ Spring.app/Contents/Resources/ITDSWrapper.icns
        cp -r macos-x64/* steam/macos/Into\ the\ Dream\ Spring.app/Contents/MacOS/osx-x64/
        cp -r macos-arm64/* steam/macos/Into\ the\ Dream\ Spring.app/Contents/MacOS/osx-arm64/
      shell: bash
    - name: Deploy to Steam
      uses: game-ci/steam-deploy@v3
      with:
        username: ${{ secrets.STEAM_USERNAME }}          
        configVdf: ${{ secrets.STEAM_CONFIG_VDF }}
        appId: '4026050'
        buildDescription: ${{ github.run_id }}
        rootPath: steam
        depot1Path: win-x64
        depot2Path: linux-x64
        depot3Path: macos
        releaseBranch: prerelease
      continue-on-error: true